<!DOCTYPE html>
<meta charset="utf-8">
<style>
 
svg {
  font: 10px sans-serif;
}
 
.line {
  fill: none;
  stroke: #000;
  stroke-width: 1.5px;
}
 
.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}
 
</style>
<body>
<script src="http://mbostock.github.com/d3/d3.js?2.7.2"></script>
<script>

var n = 40, duration = 500,
	now = new Date(),
	count = 0,
    random = d3.random.normal(1, .2);
	
    data = d3.range(n).map(random);
 
var margin = {top: 10, right: 10, bottom: 20, left: 40},
    width = window.innerWidth-25 - margin.left - margin.right,
    height = window.innerHeight-25 - margin.top - margin.bottom;
 
var x = d3.scale.linear()
    .domain([now - (n - 2) * duration, now - duration])
    .range([0, width]);
 
var y = d3.scale.linear()
    .range([height, 0]);
 
var line = d3.svg.line()
	.interpolate("basis")
    .x(function(d, i) { return x(now - (n - 1 - i) * duration); })
    .y(function(d, i) { return y(d); });
 
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 
svg.append("defs").append("clipPath")
    .attr("id", "clip")
  .append("rect")
    .attr("width", width)
    .attr("height", height);
 
var xaxis = svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(x.axis = d3.svg.axis().scale(x).orient("bottom"));
 
var yaxis = svg.append("g")
    .attr("class", "y axis")
    .call(d3.svg.axis().scale(y).orient("left"));
 
var path = svg.append("g")
    .attr("clip-path", "url(#clip)")
  .append("path")
    .data([data])
    .attr("class", "line")
    .attr("d", line);
 
tick();
 
function tick() {
 
  // push a new data point onto the back
  data.push(random());
  now = new Date();
  x.domain([now - (n - 2) * duration, now - duration]);
  y.domain([0,d3.max(data)]);
  
  // redraw the line
  svg.select(".line")
      .attr("d", line)
      .attr("transform", null);
  
	xaxis.transition()
      .duration(duration)
      .ease("linear")
      .call(x.axis);
  // slide the line left
  path.transition()
      .duration(duration)
      .ease("linear")
      .attr("transform", "translate(" + x(now - (n - 1) * duration) + ")")
      .each("end", tick);
 
  // pop the old data point off the front
  data.shift();
 
}
 
</script>