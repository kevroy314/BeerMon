<!DOCTYPE html>
<meta charset="utf-8">
<style>
 
svg {
  font: 10px sans-serif;
}
 
.line {
  fill: none;
  stroke: #000;
  stroke-width: 1.5px;
}
 
.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}
 
</style>
<body>
<script src="http://mbostock.github.com/d3/d3.js?2.7.2"></script>
<script>

var n, 
	duration,
	count,
    random;
	
var data;
var margin,
    width,
    height;
var x;
var y;
var line;
var svg;
var xaxis;
var yaxis;
var path;
 
var startX;
 
function setup(time, startValue)
 {
	n = 40, duration = 500,
		count = 0,
		random = d3.random.normal(startValue, 0);
		
		data = d3.range(n).map(random);
	 
	margin = {top: 10, right: 10, bottom: 20, left: 40},
		width = window.innerWidth-25 - margin.left - margin.right,
		height = window.innerHeight-25 - margin.top - margin.bottom;
	 startX = time-(n-2)*duration;
	x = d3.scale.linear()
		.domain([startX, time - duration])
		.range([0, width]);
	 
	y = d3.scale.linear()
		.range([height, 0]);
	 
	line = d3.svg.line()
		//.interpolate("basis")
		.x(function(d, i) { return x(time - (n - 1 - i) * duration); })
		.y(function(d, i) { return y(d); });
	 
	svg = d3.select("body").append("svg")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
	  .append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
	 
	svg.append("defs").append("clipPath")
		.attr("id", "clip")
	  .append("rect")
		.attr("width", width)
		.attr("height", height);
	 
	xaxis = svg.append("g")
		.attr("class", "x axis")
		.attr("transform", "translate(0," + height + ")")
		.call(x.axis = d3.svg.axis().scale(x).orient("bottom"));
	 
	yaxis = svg.append("g")
		.attr("class", "y axis")
		.call(y.axis = d3.svg.axis().scale(y).orient("left"));
	 
	path = svg.append("g")
		.attr("clip-path", "url(#clip)")
	  .append("path")
		.data([data])
		.attr("class", "line")
		.attr("d", line);
 }
 
function tick(t, val) {
 
  // push a new data point onto the back
  data.push(val);
  //now = new Date();
  //x.domain([t - (n - 2) * duration, t - duration]);
  x.domain([startX, t /*- duration*/]);
  y.domain([0,d3.max(data)]);
  
  // redraw the line
  svg.select(".line")
      .attr("d", line)
      .attr("transform", null);
  
	xaxis.transition()
	  .duration(duration)
	  .ease("linear")
	  .call(x.axis);
	  
	  yaxis.transition()
		.duration(duration)
		.ease("linear")
		.call(y.axis);
	// slide the line left
	//path.transition()
      //.duration(duration)
      //.ease("linear")
      //.attr("transform", "translate(" + x(t - (n - 1) * duration) + ")")
      //.each("end", tick);
 
  // pop the old data point off the front
  //if(data.length>n)
	//data.shift();
 
}
 
</script>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
        <script type="text/javascript">
		var firstPacket = true;
		
            function openConnection() {
                // uses global 'conn' object
                if (conn.readyState === undefined || conn.readyState > 1) {
 
                    conn = new WebSocket('ws://localhost:8100');
 
                    conn.onopen = function () {
                        conn.send("Connection Established Confirmation");
                    };
 
 
                    conn.onmessage = function (event) {
					if(firstPacket)
					{
						var val = event.data.split("\t");
						var t = +(val[0]);
						var z = +(val[1]);
						
						setup(t,z);
						
						firstPacket=false;
					}
					else
					{
						var val = event.data.split("\t");
						tick(+(val[0]),+(val[1]));
					}
                    };
 
                    conn.onerror = function (event) {
 
                        alert("Web Socket Error");
                    };
 
 
                    conn.onclose = function (event) {
                        alert("Web Socket Closed");
 
 
 
                    };
                }
            }
 
 
 
            $(document).ready(function () {
                conn = {}, window.WebSocket = window.WebSocket || window.MozWebSocket;
 
 
                openConnection();
            });
        </script>